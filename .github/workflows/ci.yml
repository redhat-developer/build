on: 
    pull_request:
      branches:
      - main
      - master
    push:
      branches: 
      - main
      - master
name: Unit, Integration, and E2E Tests
jobs:
    unit:
        strategy:
          matrix:
            go-version: [1.15.x]
            os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        steps:
        - name: Install Go
          uses: actions/setup-go@v2
          with:
            go-version: ${{ matrix.go-version }}
        - name: Check out code
          uses: actions/checkout@v2
        - name: Build
          run: make build
        - name: Test
          run: make test-unit-coverage
    integration:
        strategy:
          fail-fast: false
          matrix:
            go-version: [1.15.x]
            os: [ubuntu-latest]
            kubernetes:
              # Only v1.20 is currently enabled because of the flakiness in the tests, specifically API calls failing with "etcdserver: request timed out"
              #- v1.17.17
              #- v1.18.19
              #- v1.19.11
              - v1.20.7
          max-parallel: 1
        runs-on: ${{ matrix.os }}
        steps:
        - name: Install Go
          uses: actions/setup-go@v2
          with:
            go-version: ${{ matrix.go-version }}
        - name: Install Ko
          uses: imjasonh/setup-ko@20b7695b536c640edfafdd378d96c760460f29d6
        - name: Check out code
          uses: actions/checkout@v2
        - name: Install kubectl
          uses: azure/setup-kubectl@v1
          with:
            version: ${{ matrix.kubernetes }}
        - name: Create kind cluster
          uses: helm/kind-action@v1.2.0
          with:
            version: v0.11.1
            node_image: kindest/node:${{ matrix.kubernetes }}
            cluster_name: kind
            wait: 120s
        - name: Verify kind cluster
          run: |
            echo "# Using KinD context..."
            kubectl config use-context "kind-kind"
            echo "# KinD nodes:"
            kubectl get nodes

            NODE_STATUS=$(kubectl get node kind-control-plane -o json | jq -r .'status.conditions[] | select(.type == "Ready") | .status')
            if [ "${NODE_STATUS}" != "True" ]; then
              echo "# Node is not ready:"
              kubectl describe node kind-control-plane

              echo "# Pods:"
              kubectl get pod -A
              echo "# Events:"
              kubectl get events -A

              exit 1
            fi
        - name: Install Tekton
          run: |
            make kind-tekton
            kubectl -n tekton-pipelines rollout status deployment tekton-pipelines-controller --timeout=1m
            kubectl -n tekton-pipelines rollout status deployment tekton-pipelines-webhook --timeout=1m
        - name: Test
          run: |
            export GIT_CONTAINER_IMAGE="$(KO_DOCKER_REPO=kind.local ko publish ./cmd/git)"
            make test-integration
    e2e:
        strategy:
          fail-fast: false
          matrix:
            go-version: [1.15.x]
            os: [ubuntu-latest]
            kubernetes:
              # Only v1.20 is currently enabled because of the flakiness in the tests, specifically API calls failing with "etcdserver: request timed out"
              #- v1.17.17
              #- v1.18.19
              #- v1.19.11
              - v1.20.7
          max-parallel: 2
        runs-on: ${{ matrix.os }}
        steps:
        - name: Install Go
          uses: actions/setup-go@v2
          with:
            go-version: ${{ matrix.go-version }}
        - name: Check out code
          uses: actions/checkout@v2
        - name: Install kubectl
          uses: azure/setup-kubectl@v1
          with:
            version: ${{ matrix.kubernetes }}
        - name: Create kind cluster
          uses: helm/kind-action@v1.2.0
          with:
            version: v0.11.1
            node_image: kindest/node:${{ matrix.kubernetes }}
            cluster_name: kind
            config: test/kind/config.yaml
            wait: 120s
        - name: Verify kind cluster
          run: |
            echo "# Using KinD context..."
            kubectl config use-context "kind-kind"
            echo "# KinD nodes:"
            kubectl get nodes

            NODE_STATUS=$(kubectl get node kind-control-plane -o json | jq -r .'status.conditions[] | select(.type == "Ready") | .status')
            if [ "${NODE_STATUS}" != "True" ]; then
              echo "# Node is not ready:"
              kubectl describe node kind-control-plane

              echo "# Pods:"
              kubectl get pod -A
              echo "# Events:"
              kubectl get events -A

              exit 1
            fi
        - name: Install Tekton
          run: |
            make kind-tekton
            kubectl -n tekton-pipelines rollout status deployment tekton-pipelines-controller --timeout=1m
            kubectl -n tekton-pipelines rollout status deployment tekton-pipelines-webhook --timeout=1m
        - name: Install Registry
          run: |
            kubectl apply -f test/data/registry.yaml
            kubectl -n registry rollout status deployment registry --timeout=1m
        - name: Install Ko
          uses: imjasonh/setup-ko@20b7695b536c640edfafdd378d96c760460f29d6
        - name: Install Shipwright Build
          run: |
            make install-controller-kind
            kubectl -n shipwright-build rollout status deployment shipwright-build-controller --timeout=1m || true
        - name: Test
          env:
            TEST_PRIVATE_REPO: true
            TEST_SOURCE_SECRET: test-source-secret
            TEST_REPO_PRIV_KEY: ${{ secrets.CI_USER_PRIVATE_SSH_BASE64 }}
          run: |
            export TEST_NAMESPACE=shipwright-build
            export TEST_IMAGE_REPO=registry.registry.svc.cluster.local:32222/shipwright-io/build-e2e
            echo "# Creating ssh secret for private repository test"
            cat <<EOF | kubectl apply -n "${TEST_NAMESPACE}" -f -
            apiVersion: v1
            kind: Secret
            metadata:
              name: ${TEST_SOURCE_SECRET}
              annotations:
                tekton.dev/git-0: github.com
            type: kubernetes.io/ssh-auth
            data:
              ssh-privatekey: ${TEST_REPO_PRIV_KEY}
            EOF
            kubectl get secrets -n shipwright-build
            make test-e2e
        - name: Build controller logs
          if: ${{ failure() }}
          run: |
            echo "# Pods:"
            kubectl -n shipwright-build get pod
            PODS=$(kubectl -n shipwright-build get pod -o json)
            POD_NAME=$(echo "${PODS}" | jq -r '.items[] | select(.metadata.name | startswith("shipwright-build-controller-")) | .metadata.name')
            if [ "${POD_NAME}" != "" ]; then
              RESTART_COUNT=$(echo "${PODS}" | jq -r ".items[] | select(.metadata.name == \"${POD_NAME}\") | .status.containerStatuses[0].restartCount")
              if [ "${RESTART_COUNT}" != "0" ]; then
                echo "# Previous logs:"
                kubectl -n shipwright-build logs "${POD_NAME}" --previous || true
              fi
              echo "# Logs:"
              kubectl -n shipwright-build logs "${POD_NAME}"
            else
              echo "# Pod is missing, there are no logs to retrieve, bailing out..."
            fi
